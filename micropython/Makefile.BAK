TARGET:=blinky

TOOLCHAIN_ROOT:=/usr/local/Cellar/gcc-arm-none-eabi-48/20131218
TOOLCHAIN_PATH:=$(TOOLCHAIN_ROOT)/bin
TOOLCHAIN_PREFIX:=arm-none-eabi

# Optimization level, can be [0, 1, 2, 3, s].
OPTLVL:=0
DBG:=-g

FREERTOS = ../FreeRTOS
STARTUP:=$(CURDIR)/hardware
LINKER_SCRIPT:=$(CURDIR)/hardware/stm32_flash.ld

APP_INC =  -I.
APP_INC += -I..
APP_INC += -I$(CURDIR)/hardware
APP_INC += -I$(FREERTOS)
APP_INC += -I$(FREERTOS)/Source/include
APP_INC += -I$(FREERTOS)/Source/portable/GCC/ARM_CM4F
APP_INC += -I$(CURDIR)/Libraries/CMSIS/Device/ST/STM32F4xx/Include
APP_INC += -I$(CURDIR)/Libraries/CMSIS/Include
APP_INC += -I$(CURDIR)/Libraries/STM32F4xx_StdPeriph_Driver/inc
APP_INC += -I$(CURDIR)/config


BUILD_DIR = $(CURDIR)/build
BIN_DIR = $(CURDIR)/bin

# vpath is used so object files are written to the current directory instead
# of the same directory as their source files
vpath %.c $(CURDIR)/Libraries/STM32F4xx_StdPeriph_Driver/src \
	  $(CURDIR)/Libraries/syscall $(CURDIR)/hardware $(FREERTOS) \
	  $(FREERTOS)/Source/portable/MemMang $(FREERTOS)/Source/portable/GCC/ARM_CM4F 

vpath %.s $(STARTUP)

# Assembly Source Files
APP_UTIL_SRC_S = \
	startup_stm32f4xx.s

# Project Source Files
APP_MAIN_SRC_C = \
	main.c

# Hardware Specific Source Files
APP_HW_SRC_C = $(addprefix hardware/,\
	stm32f4xx_it.c \
	system_stm32f4xx.c \
	)

# FreeRTOS Source Files
APP_RTOS_SRC_C = $(addprefix FreeRTOS/Source/,\
	croutine.c \
	event_groups.c \
	list.c \
	queue.c \
	tasks.c \
	timers.c \
	portable/GCC/ARM_CM4F/port.c \
	portable/MemMang/heap_4.c \
	)

# Standard Peripheral Source Files
APP_STM_SRC_C = $(addprefix Libraries/STM32F4xx_StdPeriph_Driver/src/,\
	misc.c \
	stm32f4xx_adc.c \
	stm32f4xx_dac.c \
	stm32f4xx_dma.c \
	stm32f4xx_exti.c \
	stm32f4xx_flash.c \
	stm32f4xx_gpio.c \
	stm32f4xx_i2c.c \
	stm32f4xx_rcc.c \
	stm32f4xx_rng.c \
	stm32f4xx_spi.c \
	stm32f4xx_syscfg.c \
	stm32f4xx_tim.c \
	stm32f4xx_usart.c \
	)

# Library Source Files
APP_LIB_SRC_C = $(addprefix Libraries/syscall/,\
	syscalls.c \
	)

CDEFS=-DUSE_STDPERIPH_DRIVER
CDEFS+=-DSTM32F4XX
CDEFS+=-DHSE_VALUE=8000000
CDEFS+=-D__FPU_PRESENT=1
CDEFS+=-D__FPU_USED=1
CDEFS+=-DARM_MATH_CM4

MCUFLAGS=-mcpu=cortex-m4 -mthumb -mfloat-abi=hard
COMMONFLAGS=-O$(OPTLVL) $(DBG) -Wall
CFLAGS=$(COMMONFLAGS) $(MCUFLAGS) $(APP_INC) $(CDEFS)
LDLIBS=$(TOOLCHAIN_ROOT)/arm-none-eabi/lib/armv7e-m/fpu/libc_s.a $(TOOLCHAIN_ROOT)/arm-none-eabi/lib/armv7e-m/fpu/libm.a
LDFLAGS=$(COMMONFLAGS) -fno-exceptions -ffunction-sections -fdata-sections -nostartfiles -Wl,--gc-sections,-T$(LINKER_SCRIPT)

CC=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gcc
LD=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gcc
OBJCOPY=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-objcopy
AS=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-as
AR=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-ar
GDB=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gdb

OBJ = $(addprefix $(BUILD_DIR)/, $(APP_STM_SRC_C:.c=.o) $(APP_RTOS_SRC_C:.c=.o) $(APP_LIB_SRC_C:.c=.o) $(APP_HW_SRC_C:.c=.o) $(APP_UTIL_SRC_S:.s=.o) $(APP_MAIN_SRC_C:.c=.o))

$(BUILD_DIR)/%.o: %.c
	$(ECHO) [CC] $(notdir $<)
	@$(CC) $(CFLAGS) $< -c -o $@

all: $(OBJ)
	$(ECHO) [AS] $(APP_UTIL_SRC_S)
	@$(AS) -o $(APP_UTIL_SRC_S:%.s=$(BUILD_DIR)/%.o) $(STARTUP)/$(APP_UTIL_SRC_S)
	$(ECHO) [LD] $(TARGET).elf
	@$(CC) -o $(BIN_DIR)/$(TARGET).elf $(LDFLAGS) $(OBJ) $(APP_UTIL_SRC_S:%.s=$(BUILD_DIR)/%.o) $(LDLIBS)
	$(ECHO) [OBJCOPY] $(TARGET).hex
	@$(OBJCOPY) -O ihex $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).hex
	$(ECHO) [OBJCOPY] $(TARGET).bin
	@$(OBJCOPY) -O binary $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).bin

.PHONY: clean

clean:
	$(ECHO) [RM] OBJ
	@rm -f $(OBJ)
	@rm -f $(APP_UTIL_SRC_S:%.s=$(BUILD_DIR)/%.o)
	$(ECHO) [RM] BIN
	@rm -f $(BIN_DIR)/$(TARGET).elf
	@rm -f $(BIN_DIR)/$(TARGET).hex
	@rm -f $(BIN_DIR)/$(TARGET).bin

flash:
	@st-flash write $(BIN_DIR)/$(TARGET).bin 0x8000000
